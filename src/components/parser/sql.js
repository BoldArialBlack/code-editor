/* eslint-disable */
/**
	WebSQLShim
	==========
*/

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
      define([], factory);
  } else if (typeof exports === 'object') {
      module.exports = factory();
  } else {
      root.alasql = factory();
  }
}(this, function (parser) {

/**
Main WebSQLShim object
*/
var WebSQLShim = {};


/* parser generated by jison 0.4.15 */
/*
Returns a Parser object of the following structure:

Parser: {
  yy: {}
}

Parser.prototype: {
  yy: {},
  trace: function(),
  symbols_: {associative list: name ==> number},
  terminals_: {associative list: number ==> name},
  productions_: [...],
  performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
  table: [...],
  defaultActions: {...},
  parseError: function(str, hash),
  parse: function(input),

  lexer: {
      EOF: 1,
      parseError: function(str, hash),
      setInput: function(input),
      input: function(),
      unput: function(str),
      more: function(),
      less: function(n),
      pastInput: function(),
      upcomingInput: function(),
      showPosition: function(),
      test_match: function(regex_match_array, rule_index),
      next: function(),
      lex: function(),
      begin: function(condition),
      popState: function(),
      _currentRules: function(),
      topState: function(),
      pushState: function(condition),

      options: {
          ranges: boolean           (optional: true ==> token location info will include a .range[] member)
          flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
          backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
      },

      performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
      rules: [...],
      conditions: {associative list: name ==> set},
  }
}


token location info (@$, _$, etc.): {
  first_line: n,
  last_line: n,
  first_column: n,
  last_column: n,
  range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
}


the parseError function receives a 'hash' object with these members for lexer and parser errors: {
  text:        (matched text)
  token:       (the produced terminal token, if any)
  line:        (yylineno)
}
while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
  loc:         (yylloc)
  expected:    (string describing the set of expected tokens)
  recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
}
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[19,20],$V1=[2,20],$V2=[1,4],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,33],$V7=[1,49],$V8=[1,50],$V9=[1,35],$Va=[1,36],$Vb=[1,55],$Vc=[1,44],$Vd=[1,53],$Ve=[1,52],$Vf=[1,51],$Vg=[1,38],$Vh=[1,39],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,45],$Vm=[1,56],$Vn=[1,48],$Vo=[1,63],$Vp=[1,64],$Vq=[4,5,7,9,10,81,87,88,111,228,229,230,242,250,253],$Vr=[2,64],$Vs=[1,72],$Vt=[54,135,150],$Vu=[4,5],$Vv=[2,207],$Vw=[1,94],$Vx=[19,20,57],$Vy=[19,20,83],$Vz=[2,168],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[19,20,69],$VG=[19,20,83,168,170,193,195,196],$VH=[4,5,7,9,10,81,87,88,111,204,228,229,230,242,250,253],$VI=[4,5,19,20,56,58,65,67,76,80,81,83,87,89,90,92,113,114,152,156,161,163,168,170,171,180,181,184,193,195,196,197,204,211,212,213,215,216,217,219,223,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$VJ=[4,5,12,19,20,56,58,65,67,76,80,81,83,85,87,89,90,92,104,106,112,113,114,116,117,122,123,125,128,140,141,142,144,145,152,156,161,163,168,170,171,180,181,184,193,195,196,197,204,211,212,213,215,216,217,219,223,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$VK=[1,131],$VL=[1,132],$VM=[1,133],$VN=[1,123],$VO=[1,130],$VP=[2,321],$VQ=[1,118],$VR=[1,119],$VS=[1,121],$VT=[1,122],$VU=[1,124],$VV=[1,125],$VW=[1,127],$VX=[2,68],$VY=[1,136],$VZ=[2,179],$V_=[1,149],$V$=[19,20,184],$V01=[19,20,90,168,170,223],$V11=[2,158],$V21=[1,166],$V31=[1,165],$V41=[1,182],$V51=[1,209],$V61=[1,205],$V71=[1,204],$V81=[1,197],$V91=[1,192],$Va1=[1,190],$Vb1=[1,191],$Vc1=[1,193],$Vd1=[1,194],$Ve1=[1,195],$Vf1=[1,196],$Vg1=[1,198],$Vh1=[1,199],$Vi1=[1,200],$Vj1=[1,201],$Vk1=[1,202],$Vl1=[1,203],$Vm1=[1,206],$Vn1=[1,207],$Vo1=[1,208],$Vp1=[1,210],$Vq1=[1,211],$Vr1=[1,212],$Vs1=[1,213],$Vt1=[4,5,19,20,65,67,76,83,87,89,90,92,114,156,168,170,171,180,184,193,195,196,204,211,212,213,215,216,217,219,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$Vu1=[2,275],$Vv1=[1,215],$Vw1=[1,227],$Vx1=[4,5,19,20,65,67,76,83,85,87,89,90,92,104,106,112,113,114,123,156,168,170,171,180,184,193,195,196,204,211,212,213,215,216,217,219,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$Vy1=[19,20,168,170],$Vz1=[2,73],$VA1=[1,237],$VB1=[113,163,181,197],$VC1=[2,195],$VD1=[1,249],$VE1=[19,20,83,90,168,170,193,195,196,217],$VF1=[19,20,83,89,90,156,168,170,193,195,196,217],$VG1=[2,229],$VH1=[1,276],$VI1=[4,5,19,20,65,67,76,83,87,89,90,92,156,168,170,171,180,184,193,195,196,211,212,213,215,216,217,219,229,230,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$VJ1=[2,328],$VK1=[1,317],$VL1=[76,92,258],$VM1=[19,20,80],$VN1=[19,20,125,128,140,141,142,144],$VO1=[19,20,65],$VP1=[1,337],$VQ1=[1,335],$VR1=[19,20,83,89,170],$VS1=[2,105],$VT1=[1,345],$VU1=[1,346],$VV1=[1,348],$VW1=[19,20,89,90,168,170],$VX1=[19,20,80,83,89,90,152,168,170,193,195,196,211,212,213,215,216,217,223],$VY1=[19,20,83,168,170,193,195,196,217],$VZ1=[1,359],$V_1=[19,20,80,83,87,89,90,152,156,161,168,170,193,195,196,211,212,213,215,216,217],$V$1=[4,5,19,20,65,67,76,83,87,89,90,92,156,168,170,171,180,184,193,195,196,204,211,212,213,215,216,217,219,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$V02=[4,5,19,20,65,67,76,83,87,89,90,92,156,168,170,171,180,184,193,195,196,211,212,213,215,216,217,219,235,240,243,244,245,247,248,249,257,258],$V12=[4,5,19,20,65,67,76,83,87,89,90,92,156,168,170,171,180,184,193,195,196,211,212,213,215,216,217,219,235,236,237,238,239,240,243,244,245,246,247,248,249,257,258],$V22=[4,5,19,20,65,67,76,83,89,90,92,156,168,170,171,180,193,195,196,211,212,213,215,216,217,219,240,249,257,258],$V32=[83,89],$V42=[125,128,144],$V52=[1,398],$V62=[1,401],$V72=[80,83,89],$V82=[19,20,80,83,85,87,89,104,106,112,113,114,118,123,170],$V92=[1,414],$Va2=[2,242],$Vb2=[1,416],$Vc2=[1,417],$Vd2=[1,418],$Ve2=[1,419],$Vf2=[19,20,83,89,90,168,170,193,195,196,211,212,213,215,216,217],$Vg2=[19,20,89],$Vh2=[4,5,81],$Vi2=[19,20,80,83,89,90,152,168,170,193,195,196,211,212,213,215,216,217],$Vj2=[19,20,83,89],$Vk2=[1,470],$Vl2=[1,469],$Vm2=[1,466],$Vn2=[1,468],$Vo2=[1,471],$Vp2=[1,472],$Vq2=[1,473],$Vr2=[1,475],$Vs2=[19,20,83,85,87,89,104,106,112,113,114,123],$Vt2=[4,5,19,20,81,83,85,87,89,104,106,112,113,114,123],$Vu2=[1,481],$Vv2=[19,20,83,89,168,170,193,195,196,219],$Vw2=[89,125,128,134,144,197],$Vx2=[2,125],$Vy2=[1,505],$Vz2=[1,524],$VA2=[1,521],$VB2=[1,523],$VC2=[1,525],$VD2=[1,526],$VE2=[67,92],$VF2=[19,20,83,85,87,89,104,106,112,113,114,118,123],$VG2=[76,125,128,134,144,163,197];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"name":3,"LITERAL":4,"BRALITERAL":5,"signed_number":6,"NUMBER":7,"string_literal":8,"STRING":9,"XSTRING":10,"database_table_name":11,"DOT":12,"database_pragma_name":13,"database_index_name":14,"database_trigger_name":15,"database_view_name":16,"main":17,"sql_stmt_list":18,"EOF":19,"SEMICOLON":20,"sql_stmt":21,"sql_stmt_explain":22,"sql_stmt_stmt":23,"alter_table_stmt":24,"analyze_stmt":25,"attach_stmt":26,"begin_stmt":27,"commit_stmt":28,"create_index_stmt":29,"create_table_stmt":30,"create_trigger_stmt":31,"create_view_stmt":32,"create_virtual_table_stmt":33,"delete_stmt":34,"detach_stmt":35,"drop_index_stmt":36,"drop_table_stmt":37,"drop_trigger_stmt":38,"drop_view_stmt":39,"insert_stmt":40,"pragma_stmt":41,"reindex_stmt":42,"release_stmt":43,"rollback_stmt":44,"savepoint_stmt":45,"select_stmt":46,"update_stmt":47,"vacuum_stmt":48,"explain_stmt":49,"EXPLAIN":50,"QUERY":51,"PLAN":52,"ALTER":53,"TABLE":54,"alter_table_action":55,"RENAME":56,"TO":57,"ADD":58,"COLUMN":59,"column_def":60,"ANALYZE":61,"ATTACH":62,"database":63,"expr":64,"AS":65,"DATABASE":66,"BEGIN":67,"deferred_exclusive":68,"TRANSACTION":69,"DEFERRED":70,"IMMEDIATE":71,"EXCLUSIVE":72,"commit":73,"transaction":74,"COMMIT":75,"END":76,"CREATE":77,"INDEX":78,"if_not_exists":79,"ON":80,"LPAR":81,"columns":82,"RPAR":83,"where":84,"UNIQUE":85,"IF":86,"NOT":87,"EXISTS":88,"COMMA":89,"WHERE":90,"when":91,"WHEN":92,"temporary":93,"column_defs":94,"table_constraints":95,"without_rowid":96,"WITHOUT":97,"ROWID":98,"TEMPORARY":99,"type_name":100,"column_constraints":101,"names":102,"column_constraint":103,"CONSTRAINT":104,"col_constraint":105,"PRIMARY":106,"KEY":107,"asc_desc":108,"conflict_clause":109,"autoincrement":110,"NULL":111,"CHECK":112,"DEFAULT":113,"COLLATE":114,"foreign_key_clause":115,"ASC":116,"DESC":117,"AUTOINCREMENT":118,"tab_constraints":119,"table_constraint":120,"tab_constraint":121,"FOREIGN":122,"REFERENCES":123,"on_foreign_key_clause":124,"DELETE":125,"NO":126,"ACTION":127,"UPDATE":128,"CONFLICT":129,"ROLLBACK":130,"ABORT":131,"FAIL":132,"IGNORE":133,"REPLACE":134,"TRIGGER":135,"before_after":136,"delete_insert_update":137,"for_each_row":138,"begin_trigger_end":139,"BEFORE":140,"AFTER":141,"INSTEAD":142,"OF":143,"INSERT":144,"FOR":145,"EACH":146,"ROW":147,"uids_stmts":148,"uids_stmt":149,"VIEW":150,"VIRTUAL":151,"USING":152,"module_arguments_par":153,"module_arguments":154,"module_argument":155,"FROM":156,"qualified_table_name":157,"limit_clause":158,"with":159,"indexed":160,"INDEXED":161,"BY":162,"WITH":163,"recursive":164,"cte_tables":165,"RECURSIVE":166,"cte_table_name":167,"ORDER":168,"ordering_terms":169,"LIMIT":170,"offset":171,"ordering_term":172,"DETACH":173,"DROP":174,"if_exists":175,"insert_action":176,"INTO":177,"columns_par":178,"insert_values":179,"OR":180,"VALUES":181,"values":182,"PRAGMA":183,"EQ":184,"pragma_value":185,"REINDEX":186,"RELEASE":187,"savepoint":188,"SAVEPOINT":189,"compound_selects":190,"compound_operator":191,"select":192,"UNION":193,"ALL":194,"INTERSECT":195,"EXCEPT":196,"SELECT":197,"distinct_all":198,"result_columns":199,"from":200,"group_by":201,"DISTINCT":202,"result_column":203,"STAR":204,"alias":205,"join_clause":206,"table_or_subquery":207,"join_operator":208,"join_constraint":209,"join_type":210,"JOIN":211,"NATURAL":212,"LEFT":213,"OUTER":214,"INNER":215,"CROSS":216,"GROUP":217,"exprs":218,"HAVING":219,"value":220,"subvalues":221,"update_action":222,"SET":223,"column_expr_list":224,"column_expr":225,"VACUUM":226,"literal_value":227,"bind_parameter":228,"PLUS":229,"MINUS":230,"SLASH":231,"REM":232,"LSHIFT":233,"RSHIFT":234,"NE":235,"GT":236,"GE":237,"LT":238,"LE":239,"AND":240,"arguments":241,"CAST":242,"ISNULL":243,"IS":244,"NOTNULL":245,"ESCAPE":246,"LIKE":247,"MATCH":248,"BETWEEN":249,"expt":250,"not":251,"IN":252,"CASE":253,"when_then_list":254,"else":255,"when_then":256,"THEN":257,"ELSE":258,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",7:"NUMBER",9:"STRING",10:"XSTRING",12:"DOT",19:"EOF",20:"SEMICOLON",22:"sql_stmt_explain",23:"sql_stmt_stmt",50:"EXPLAIN",51:"QUERY",52:"PLAN",53:"ALTER",54:"TABLE",56:"RENAME",57:"TO",58:"ADD",59:"COLUMN",61:"ANALYZE",62:"ATTACH",65:"AS",66:"DATABASE",67:"BEGIN",69:"TRANSACTION",70:"DEFERRED",71:"IMMEDIATE",72:"EXCLUSIVE",75:"COMMIT",76:"END",77:"CREATE",78:"INDEX",80:"ON",81:"LPAR",83:"RPAR",85:"UNIQUE",86:"IF",87:"NOT",88:"EXISTS",89:"COMMA",90:"WHERE",92:"WHEN",97:"WITHOUT",98:"ROWID",99:"TEMPORARY",104:"CONSTRAINT",106:"PRIMARY",107:"KEY",111:"NULL",112:"CHECK",113:"DEFAULT",114:"COLLATE",116:"ASC",117:"DESC",118:"AUTOINCREMENT",122:"FOREIGN",123:"REFERENCES",125:"DELETE",126:"NO",127:"ACTION",128:"UPDATE",129:"CONFLICT",130:"ROLLBACK",131:"ABORT",132:"FAIL",133:"IGNORE",134:"REPLACE",135:"TRIGGER",140:"BEFORE",141:"AFTER",142:"INSTEAD",143:"OF",144:"INSERT",145:"FOR",146:"EACH",147:"ROW",150:"VIEW",151:"VIRTUAL",152:"USING",155:"module_argument",156:"FROM",161:"INDEXED",162:"BY",163:"WITH",166:"RECURSIVE",168:"ORDER",170:"LIMIT",171:"offset",173:"DETACH",174:"DROP",177:"INTO",180:"OR",181:"VALUES",183:"PRAGMA",184:"EQ",186:"REINDEX",187:"RELEASE",189:"SAVEPOINT",193:"UNION",194:"ALL",195:"INTERSECT",196:"EXCEPT",197:"SELECT",202:"DISTINCT",204:"STAR",211:"JOIN",212:"NATURAL",213:"LEFT",214:"OUTER",215:"INNER",216:"CROSS",217:"GROUP",219:"HAVING",223:"SET",226:"VACUUM",228:"bind_parameter",229:"PLUS",230:"MINUS",231:"SLASH",232:"REM",233:"LSHIFT",234:"RSHIFT",235:"NE",236:"GT",237:"GE",238:"LT",239:"LE",240:"AND",242:"CAST",243:"ISNULL",244:"IS",245:"NOTNULL",246:"ESCAPE",247:"LIKE",248:"MATCH",249:"BETWEEN",250:"expt",252:"IN",253:"CASE",257:"THEN",258:"ELSE"},
productions_: [0,[3,1],[3,1],[6,1],[8,1],[8,1],[11,3],[11,1],[13,3],[13,1],[14,3],[14,1],[15,3],[15,1],[16,3],[16,1],[17,2],[18,3],[18,1],[21,2],[21,0],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[49,0],[49,1],[49,3],[24,4],[55,3],[55,3],[25,2],[26,5],[63,0],[63,1],[27,3],[68,0],[68,1],[68,1],[68,1],[28,2],[73,1],[73,1],[74,0],[74,1],[29,10],[29,11],[79,0],[79,3],[82,3],[82,1],[84,2],[84,0],[91,2],[91,0],[30,7],[30,10],[96,0],[96,2],[93,0],[93,1],[94,3],[94,1],[60,3],[60,2],[100,1],[100,4],[100,6],[102,2],[102,1],[101,2],[101,1],[103,3],[103,1],[105,5],[105,3],[105,2],[105,4],[105,2],[105,2],[105,2],[105,4],[105,2],[105,1],[108,0],[108,1],[108,1],[110,0],[110,1],[95,0],[95,2],[119,3],[119,1],[120,3],[120,1],[121,6],[121,5],[121,4],[121,6],[115,6],[124,0],[124,4],[124,4],[124,8],[109,0],[109,3],[109,3],[109,3],[109,3],[109,3],[31,12],[136,0],[136,1],[136,1],[136,2],[137,1],[137,1],[137,1],[137,3],[138,0],[138,3],[139,3],[148,3],[148,2],[149,1],[149,1],[149,1],[149,1],[32,7],[33,8],[153,0],[153,3],[154,3],[154,1],[34,5],[34,6],[157,2],[160,0],[160,3],[160,2],[159,3],[164,1],[164,0],[165,5],[165,7],[167,1],[167,4],[158,0],[158,3],[158,3],[158,6],[169,3],[169,1],[172,2],[35,2],[35,3],[36,4],[175,2],[175,0],[37,4],[38,4],[39,4],[40,6],[40,5],[176,1],[176,1],[176,3],[176,3],[176,3],[176,3],[176,3],[179,2],[179,1],[179,2],[178,0],[178,3],[41,2],[41,4],[41,6],[185,1],[185,1],[185,1],[42,1],[42,2],[42,4],[43,3],[188,0],[188,1],[44,5],[44,2],[45,2],[46,3],[46,2],[190,3],[190,1],[191,1],[191,2],[191,1],[191,1],[192,6],[198,0],[198,1],[198,1],[199,3],[199,1],[203,1],[203,3],[203,2],[205,0],[205,1],[205,2],[200,0],[200,2],[207,3],[207,3],[207,4],[206,1],[206,4],[208,1],[208,2],[208,3],[210,0],[210,2],[210,1],[210,1],[210,1],[209,0],[209,2],[209,4],[201,0],[201,3],[201,5],[218,3],[218,1],[182,3],[182,1],[220,3],[221,3],[221,1],[47,7],[47,6],[222,1],[222,3],[222,3],[222,3],[222,3],[222,3],[224,3],[224,1],[225,3],[48,1],[64,1],[64,1],[64,1],[64,1],[64,3],[64,5],[64,2],[64,2],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,4],[64,3],[64,6],[64,3],[64,2],[64,3],[64,2],[64,3],[64,4],[64,3],[64,3],[64,4],[64,3],[64,4],[64,3],[64,4],[64,4],[64,5],[64,6],[64,6],[64,5],[64,3],[64,5],[64,4],[227,1],[227,1],[251,0],[251,1],[241,3],[241,1],[254,2],[254,1],[256,4],[255,0],[255,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 3: case 4: case 5: case 94: case 111: case 115: case 145: case 146: case 147: case 148: case 272:
this.$ = $$[$0]; 
break;
case 2:
this.$ = $$[$0].substr(1,$$[$0].length-2); 
break;
case 6:
this.$ = {database:$$[$0-2], table:$$[$0]}; 
break;
case 7:
this.$ = {table:$$[$0]}; 
break;
case 8:
this.$ = {database:$$[$0-2], pragma:$$[$0]}; 
break;
case 9:
this.$ = {pragma:$$[$0]}; 
break;
case 10:
this.$ = {database:$$[$0-2], index:$$[$0]}; 
break;
case 11:
this.$ = {index:$$[$0]}; 
break;
case 12:
this.$ = {database:$$[$0-2], trigger:$$[$0]}; 
break;
case 13:
this.$ = {trigger:$$[$0]}; 
break;
case 14:
this.$ = {database:$$[$0-2], view:$$[$0]}; 
break;
case 15:
this.$ = {view:$$[$0]}; 
break;
case 16:

    this.$ = $$[$0-1]; 
    return this.$;
  
break;
case 17:
this.$ = $$[$0-2]; if($$[$0]) this.$.push($$[$0]); 
break;
case 18: case 71: case 83: case 92: case 113: case 144: case 154: case 173: case 215: case 225: case 237: case 254: case 256: case 259: case 269: case 324: case 326:
this.$ = [$$[$0]]; 
break;
case 19:
this.$ = $$[$0]; yy.extend(this.$, $$[$0-1]); 
break;
case 20: case 46: case 57: case 68: case 78: case 80: case 105: case 108: case 110: case 125: case 132: case 140: case 151: case 158: case 163: case 168: case 179: case 195: case 221: case 232: case 247: case 321: case 328:
this.$ = undefined; 
break;
case 47: case 48:
this.$ = {explain:true}; 
break;
case 49:
this.$ = {statement: 'ALTER TABLE'}; 
  yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]);  
break;
case 50:
this.$ = {action: 'RENAME TO', new_table:$$[$0]}; 
break;
case 51:
this.$ = {action: 'ADD COLUMN', column_def:$$[$0]}; 
break;
case 52:
this.$ = {statement: 'ANALYZE'}; yy.extend(this.$, $$[$0]); 
break;
case 53:
this.$ = {statement: 'ATTACH', expr: $$[$0-2], database:$$[$0]}; 
break;
case 56:
this.$ = {statement: 'BEGIN TRANSACTION', type: $$[$0-1]}; 
break;
case 58:
this.$ = 'DEFERRED'; 
break;
case 59:
this.$ = 'IMMEDIATE'; 
break;
case 60:
this.$ = 'EXCLUSIVE'; 
break;
case 61:
this.$ = {statement: 'COMMIT TRANSACTION'}; 
break;
case 66:
this.$ = {statement: 'CREATE INDEX', table:$$[$0-4], columns:$$[$0-2] }; 
      yy.extend(this.$, $$[$0-7]); 
      yy.extend(this.$, $$[$0-6]); 
      yy.extend(this.$,$$[$0]);
    
break;
case 67:
this.$ = {statement: 'CREATE INDEX', unique:true, table:$$[$0-4], columns:$$[$0-2] }; 
      yy.extend(this.$, $$[$0-9]); 
      yy.extend(this.$, $$[$0-7]); 
      yy.extend(this.$, $$[$0-6]); 
      yy.extend(this.$,$$[$0]);
    
break;
case 69:
this.$ = {if_not_exists: true}; 
break;
case 70: case 82: case 112: case 153: case 172: case 224: case 255: case 258: case 268: case 323:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 72:
this.$ = {where: $$[$0]}; 
break;
case 74:
this.$ = {when: $$[$0]}; 
break;
case 76:
this.$ = {statement: 'CREATE TABLE', select:$$[$0]};
    yy.extend(this.$,$$[$0-5]);
    yy.extend(this.$,$$[$0-3]);
    yy.extend(this.$,$$[$0-2]);
  
break;
case 77:
this.$ = {statement: 'CREATE TABLE', column_defs: $$[$0-3], table_constraints:$$[$0-2] };
    yy.extend(this.$,$$[$0-8]);
    yy.extend(this.$,$$[$0-6]);
    yy.extend(this.$,$$[$0-5]);
    yy.extend(this.$,$$[$0]);
  
break;
case 79:
this.$ = {without_rowid: true} 
break;
case 81:
this.$ = {temporary:true}; 
break;
case 84:
this.$ = {column:$$[$0-2], constraints: $$[$0]}; yy.extend(this.$,$$[$0-1]); 
break;
case 85:
this.$ = {column:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 86:
this.$ = {type: $$[$0].toUpperCase()}; 
break;
case 87:
this.$ = {type: $$[$0-3].toUpperCase(), precision: $$[$0-1]}; 
break;
case 88:
this.$ = {type: $$[$0-5].toUpperCase(), precision: $$[$0-3], scale:$$[$0-1]}; 
break;
case 89:
this.$ = $$[$0-1]+' '+$$[$0]; 
break;
case 90:
this.$ =$$[$0]; 
break;
case 91: case 325:
this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 93: case 114:
this.$ = {constraint: $$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 95:
this.$ = {type: 'PRIMARY KEY'}; yy.extend(this.$,$$[$0-2]); 
    yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); 
break;
case 96:
this.$ = {type: 'NOT NULL'}; yy.extend(this.$,$$[$0]); 
break;
case 97:
this.$ = {type: 'UNIQUE'}; yy.extend(this.$,$$[$0]); 
break;
case 98:
this.$ = {type: 'CHECK', expr: $$[$0-1]}; 
break;
case 99:
this.$ = {type: 'DEFAULT', number: $$[$0]}; 
break;
case 100:
this.$ = {type: 'DEFAULT', string: $$[$0]}; 
break;
case 101:
this.$ = {type: 'DEFAULT', value: $$[$0]}; 
break;
case 102:
this.$ = {type: 'DEFAULT', expr: $$[$0-1]}; 
break;
case 103:
this.$ = {type: 'COLLATE', collate: $$[$0]}; 
break;
case 104:
this.$ = {type: 'FOREIGN KEY'}; yy.extend(this.$,$$[$0]); 
break;
case 106:
this.$ = {order:'ASC'}; 
break;
case 107:
this.$ = {order:'DESC'}; 
break;
case 109:
this.$ = {autoincrement:true}; 
break;
case 116:
this.$ = {type:'PRIMARY KEY', columns: $$[$0-2]}; yy.extend(this.$,$$[$0]); 
break;
case 117:
this.$ = {type:'UNIQUE', columns: $$[$0-2]}; yy.extend(this.$,$$[$0]); 
break;
case 118:
this.$ = {type:'CHECK', expr: $$[$0-1]}; 
break;
case 119:
this.$ = {type:'FOREIGN KEY', columns: $$[$0-2]}; yy.extend(this.$, $$[$0]); 
break;
case 120:
this.$ = {table: $$[$0-4], columns: $$[$0-2]}; yy.extend(this.$, $$[$0]); 
break;
case 121:
this.$ = null; 
break;
case 122:
this.$ = {on_delete_no_action:true}; 
break;
case 123:
this.$ = {on_update_no_action:true}; 
break;
case 124:
this.$ = {on_delete_no_action:true, on_update_no_action:true}; 
break;
case 126:
this.$ = {conflict: 'ROLLBACK'}; 
break;
case 127:
this.$ = {conflict: 'ABORT'}; 
break;
case 128:
this.$ = {conflict: 'FAIL'}; 
break;
case 129:
this.$ = {conflict: 'IGNORE'}; 
break;
case 130:
this.$ = {conflict: 'REPLACE'}; 
break;
case 131:

    this.$ = {statement: 'CREATE TRIGGER', table:$$[$0-3]};
    yy.extend(this.$,$$[$0-10]);
    yy.extend(this.$,$$[$0-8]);
    yy.extend(this.$,$$[$0-7]);
    yy.extend(this.$,$$[$0-6]);
    yy.extend(this.$,$$[$0-5]);
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 133:
this.$ = {when: 'BEFORE'}; 
break;
case 134:
this.$ = {when: 'AFTER'}; 
break;
case 135:
this.$ = {when: 'INSTEAD OF'}; 
break;
case 136:
this.$ = {action: 'DELETE'}; 
break;
case 137:
this.$ = {action: 'INSERT'}; 
break;
case 138:
this.$ = {action: 'UPDATE'}; 
break;
case 139:
this.$ = {action: 'UPDATE', columns: $$[$0]}; 
break;
case 141:
this.$ = {for_each_row: true}; 
break;
case 142:
this.$ = {stmts: $$[$0-1]}; 
break;
case 143:
this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 149:

    this.$ = {statement: 'CREATE VIEW', select: $$[$0]}; 
    yy.extend(this.$,$$[$0-5]); 
    yy.extend(this.$,$$[$0-3]); 
    yy.extend(this.$,$$[$0-2]); 
  
break;
case 150:

    this.$ = {statement: 'CREATE VIRTUAL TABLE', module: $$[$0-1]}; 
    yy.extend(this.$,$$[$0-4]); 
    yy.extend(this.$,$$[$0-3]); 
    yy.extend(this.$,$$[$0]); 
  
break;
case 152:
this.$ = {module_arguments: $$[$0-1]}; 
break;
case 155:

    this.$ = {statement:'DELETE'};
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 156:

    this.$ = {statement:'DELETE'};
    yy.extend(this.$,$$[$0-5]);
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 157:
this.$ = $$[$0-1]; yy.extend(this.$, $$[$0]); 
break;
case 159:
this.$ = {indexed_by:$$[$01]}; 
break;
case 160:
this.$ = {not_indexed:true}; 
break;
case 161:
this.$ = {with: $$[$0]}; yy.extend(this.$,$$[$0-1]); 
break;
case 162:
this.$ = {recursive:true}; 
break;
case 164:
 
    yy.extend($$[$0-4], {select:$$[$0-1]});
    this.$ = [$$[$0-4]];
  
break;
case 165:

    yy.extend($$[$0-4], {select:$$[$0-1]});		
    this.$ = $$[$0-6];
    this.$.push($$[$0-4]);
  
break;
case 166:
this.$ = {table: $$[$0]}; 
break;
case 167:
this.$ = {table:$$[$0-3], columns: $$[$0-1]}
break;
case 169:

    this.$ = {order_by:$$[$0]};
  
break;
case 170:

    this.$ = {limit:$$[$0-1]};
    yy.extend(this.$, $$[$0]);
  
break;
case 171:

    this.$ = {order_by:$$[$0-3], limit:$$[$0-1]};
    yy.extend(this.$, $$[$0]);
  
break;
case 174:

    this.$ = {term: $$[$0-1]}; 
    yy.extend(this.$, $$[$0]);
  
break;
case 175: case 176:
this.$ = {statement:'DETACH', database:$$[$0]}; 
break;
case 177:

    this.$ = {statement: 'DROP INDEX'}; 
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 178:
this.$ = {if_exists:true}; 
break;
case 180:

    this.$ = {statement: 'DROP TABLE'}; 
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 181:

    this.$ = {statement: 'DROP TRIGGER'}; 
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 182:

    this.$ = {statement: 'DROP VIEW'}; 
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 183:

    this.$ = {statement: 'INSERT', action: $$[$0-4]};
    yy.extend(this.$,$$[$0-5]);
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 184:

    this.$ = {statement: 'INSERT', action: $$[$0-4]};
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 185:
this.$ = 'INSERT'; 
break;
case 186:
this.$ = 'REPLACE'; 
break;
case 187:
this.$ = 'INSERT OR REPLACE'; 
break;
case 188:
this.$ = 'INSERT OR ROLLBACK'; 
break;
case 189:
this.$ = 'INSERT OR ABORT'; 
break;
case 190:
this.$ = 'INSERT OR FAIL'; 
break;
case 191:
this.$ = 'INSERT OR IGNORE'; 
break;
case 192:
this.$ = {values: $$[$0]}; 
break;
case 193:
this.$ = {select:$$[$0]}; 
break;
case 194:
this.$ = {default_values: true}; 
break;
case 196:
this.$ = {columns: $$[$0-1]}
break;
case 197:
this.$ = {statement: 'PRAGMA'}; yy.extend(this.$,$$[$0-1]); 
break;
case 198:
this.$ = {statement: 'PRAGMA', value:$$[$0]}; yy.extend(this.$,$$[$0-3]); 
break;
case 199:
this.$ = {statement: 'PRAGMA', value:$$[$0-1]}; yy.extend(this.$,$$[$0-5]); 
break;
case 200:
this.$ = {number: $$[$0]}; 
break;
case 201:
this.$ = {name: $$[$0]}; 
break;
case 202:
this.$ = {string: $$[$0]}; 
break;
case 203:
this.$ = {statement: 'REINDEX'}; 
break;
case 204:
this.$ = {statement: 'REINDEX', name: $$[$0]}; 
break;
case 205:
this.$ = {statement: 'REINDEX', database: $$[$0-2], name: $$[$0-2]}; 
break;
case 206:
this.$ = {statement: 'RELEASE SAVEPOINT', savepoint: $$[$0]}; 
break;
case 209:
this.$ = {statement: 'ROLLBACK TRANSACTION', savepoint: $$[$0-2]}; 
break;
case 210:
this.$ = {statement: 'ROLLBACK TRANSACTION'}; 
break;
case 211:
this.$ = {statement: 'SAVEPOINT', savepoint: $$[$01]}; 
break;
case 212: case 213:

    this.$ = {statement: 'SELECT', selects: $$[$0-1]};
    yy.extend(this.$,$$[$0]);
  
break;
case 214:
this.$ = $$[$0-2]; yy.extend($$[$0],{compound:$$[$0-1]}); this.$.push($$[$0]); 
break;
case 216:
this.$ = 'UNION'; 
break;
case 217:
this.$ = 'UNION ALL'; 
break;
case 218:
this.$ = 'INTERSECT'; 
break;
case 219:
this.$ = 'EXCEPT'; 
break;
case 220:

    this.$ = {columns:$$[$0-3]};
    yy.extend(this.$,$$[$0-4]);
    yy.extend(this.$,$$[$0-2]);
    yy.extend(this.$,$$[$0-1]);
    yy.extend(this.$,$$[$0]);
  
break;
case 222:
this.$ = {distinct:true}; 
break;
case 223:
this.$ = {all:true}; 
break;
case 226:
this.$ = {star:true}; 
break;
case 227:
this.$ = {table: $$[$0-2], star:true}; 
break;
case 228:
this.$ = {expr: $$[$0-1]}; yy.extend(this.$,$$[$0]);  
break;
case 229:
this.$ = undefined;
break;
case 230: case 231:
this.$ = {alias: $$[$0]};
break;
case 233:
this.$ = {from:$$[$0]}; 
break;
case 234:
this.$ = $$[$0-2]; yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); 
break;
case 235:
this.$ = {join:$$[$0-1]}; 
break;
case 236:
this.$ = {select: $$[$0-2]}; yy.extend($$[$0-2],$$[$0]); 
break;
case 238:

    yy.extend($$[$0-1],$$[$0-2]);
    yy.extend($$[$0-1],$$[$0]);
    this.$.push($$[$0-1]);
  
break;
case 239: case 246:
this.$ = {join_type: 'CROSS'}; 
break;
case 240: case 257:
this.$ = $$[$0-1]; 
break;
case 241:
this.$ = $$[$0-2]; yy.extend(this.$, {natural:true}); 
break;
case 242: case 245:
this.$ = {join_type: 'INNER'}; 
break;
case 243: case 244:
this.$ = {join_type: 'LEFT'}; 
break;
case 248:
this.$ = {on: $$[$0]}; 
break;
case 249:
this.$ = {using: $$[$0-1]}; 
break;
case 251:
this.$ = {group_by: $$[$0]}; 
break;
case 252:
this.$ = {group_by: $$[$0-2], having: $$[$0]}; 
break;
case 253:
this.$ = $$[$0-2]; this.$.push($$[$0-2]); 
break;
case 260:

    this.$ = {statement: 'UPDATE', action: $$[$0-5], set: $$[$0-2]};
    yy.extend(this.$,$$[$0-6]);
    yy.extend(this.$,$$[$0-4]);
    yy.extend(this.$,$$[$0-1]);
  
break;
case 261:

    this.$ = {statement: 'UPDATE', action: $$[$0-5], set: $$[$0-2]};
    yy.extend(this.$,$$[$0-4]);
    yy.extend(this.$,$$[$0-1]);
  
break;
case 262:
this.$ = 'UPDATE'
break;
case 263:
this.$ = 'UPDATE OR ROLLBACK'
break;
case 264:
this.$ = 'UPDATE OR ABORT'
break;
case 265:
this.$ = 'UPDATE OR REPLACE'
break;
case 266:
this.$ = 'UPDATE OR FAIL'
break;
case 267:
this.$ = 'UPDATE OR IGNORE'
break;
case 270:
this.$ = {column:$$[$0-2], expr: $$[$0]}; 
break;
case 271:
this.$ = {statement: 'VACUUM'}; 
break;
case 273:
this.$ = {type:'NULL'}; 
break;
case 274:
this.$ = {bind_parameter: $$[$0]}; 
break;
case 275:
this.$ = {column: $$[$0]}; 
break;
case 276:
this.$ = {table: $$[$0-2], column: $$[$0]}; 
break;
case 277:
this.$ = {database: $$[$0-4], table: $$[$0-2], column: $$[$0]}; 
break;
case 278:
this.$ = {op: 'UNIPLUS', expr: $$[$0]}; 
break;
case 279:
this.$ = {op: 'UNIMINUS', expr: $$[$0]}; 
break;
case 280:
this.$ = {op: 'PLUS', left: $$[$0-2], right: $$[$0]}; 
break;
case 281:
this.$ = {op: 'MINUS', left: $$[$0-2], right: $$[$0]}; 
break;
case 282:
this.$ = {op: 'MULTIPLY', left: $$[$0-2], right: $$[$0]}; 
break;
case 283:
this.$ = {op: 'DIVIDE', left: $$[$0-2], right: $$[$0]}; 
break;
case 284:
this.$ = {op: 'REM', left: $$[$0-2], right: $$[$0]}; 
break;
case 285:
this.$ = {op: 'LSHIFT', left: $$[$0-2], right: $$[$0]}; 
break;
case 286:
this.$ = {op: 'RSHIFT', left: $$[$0-2], right: $$[$0]}; 
break;
case 287:
this.$ = {op: 'EQ', left: $$[$0-2], right: $$[$0]}; 
break;
case 288:
this.$ = {op: 'NE', left: $$[$0-2], right: $$[$0]}; 
break;
case 289:
this.$ = {op: 'GT', left: $$[$0-2], right: $$[$0]}; 
break;
case 290:
this.$ = {op: 'GE', left: $$[$0-2], right: $$[$0]}; 
break;
case 291:
this.$ = {op: 'LT', left: $$[$0-2], right: $$[$0]}; 
break;
case 292:
this.$ = {op: 'LE', left: $$[$0-2], right: $$[$0]}; 
break;
case 293:
this.$ = {op: 'AND', left: $$[$0-2], right: $$[$0]}; 
break;
case 294:
this.$ = {op: 'OR', left: $$[$0-2], right: $$[$0]}; 
break;
case 295:
this.$ = {function:$$[$0-3], arguments: $$[$0-1]}; 
break;
case 296:
this.$ = {op: 'PAR', expr:$$[$0-1]}; 
break;
case 297:
this.$ = {op: 'CAST', expr:$$[$0-4]}; yy.extend(this.$,$$[$0-1]); 
break;
case 298:
this.$ = {op: 'COLLATE', left: $$[$0-2], right:$$[$0]};
break;
case 299:
this.$ = {op: 'ISNULL', expr:$$[$0-1]}; 
break;
case 300:
this.$ = {op: 'ISNULL', expr:$$[$0-2]}; 
break;
case 301:
this.$ = {op: 'NOTNULL', expr:$$[$0-1]}; 
break;
case 302:
this.$ = {op: 'NOTNULL', expr:$$[$0-2]}; 
break;
case 303:
this.$ = {op: 'NOTNULL', expr:$$[$0-3]}; 
break;
case 304:
this.$ = {op:'ESCAPE', left: $$[$0-2], right: $$[$0]}; 
break;
case 305:

    this.$ = {op: 'LIKE', left:$$[$0-2], right:$$[$0]}; 
    if(typeof $$[$0] != 'undefined') {
      if($$[$0].op != 'ESCAPE') {
        throw new Error('Should be ESCAPE');
      } else {
        this.$.right = $$[$0].left; 
        this.$.escape = $$[$0].right; 
      }
    } 
  
break;
case 306:

    this.$ = {op: 'LIKE', not:true, left:$$[$0-3], right:$$[$0]}; 
    if(typeof $$[$0] != 'undefined') {
      if($$[$0].op != 'ESCAPE') {
        throw new Error('Should be ESCAPE');
      } else {
        this.$.right = $$[$0].left; 
        this.$.escape = $$[$0].right; 
      }
    } 
  
break;
case 307:

    this.$ = {op: 'MATCH', left:$$[$0-2], right:$$[$0]}; 
    if(typeof $$[$0] != 'undefined') {
      if($$[$0].op != 'ESCAPE') {
        throw new Error('Should be ESCAPE');
      } else {
        this.$.right = $$[$0].left; 
        this.$.escape = $$[$0].right; 
      }
    } 
  
break;
case 308:

    this.$ = {op: 'MATCH', not:true, left:$$[$0-3], right:$$[$0]}; 
    if(typeof $$[$0] != 'undefined') {
      if($$[$0].op != 'ESCAPE') {
        throw new Error('Should be ESCAPE');
      } else {
        this.$.right = $$[$0].left; 
        this.$.escape = $$[$0].right; 
      }
    } 
  
break;
case 309:

    if($$[$0].op != 'AND') throw new Error('Wrong syntax of BETWEEN AND');
    this.$ = {op: 'BETWEEN', expr: $$[$0-2], left:$$[$0].left, right:$$[$0].right}; 
    yy.extend(this.$,$$[$0-1]); 
  
break;
case 310:

    if($$[$0].op != 'AND') throw new Error('Wrong syntax of NOT BETWEEN AND');
    this.$ = {op: 'BETWEEN', not:true, expr: $$[$0-3], left:$$[$0].left, right:$$[$0].right}; 
  
break;
case 311:
this.$ = {op: 'IN', expr: $$[$0-3]}; yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0]);
break;
case 312:
this.$ = {op: 'IN', expr: $$[$0-4]}; yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-1]);
break;
case 313:
this.$ = {op: 'IN', expr: $$[$0-5], select: $$[$0-1]}; yy.extend(this.$,$$[$0-4]); 
break;
case 314:
this.$ = {op: 'IN', expr: $$[$0-5], exprs: $$[$0-1]}; yy.extend(this.$,$$[$0-4]); 
break;
case 315:
this.$ = {op:'EXISTS', select: $$[$0-1]}; yy.extend(this.$,$$[$0-4]);
break;
case 316:
this.$ = {op:'SELECT', select:$$[$0-1]}; 
break;
case 317:
this.$ = {op: 'CASE', expr: $$[$0-3], whens: $$[$0-2]}; yy.extend(this.$,$$[$0-1]); 
break;
case 318:
this.$ = {op: 'WHEN', whens: $$[$0-1]}; yy.extend(this.$,$$[$0]);
break;
case 319:
this.$ = {type:'number', number:$$[$0]}; 
break;
case 320:
this.$ = {type:'string', string: $$[$0]}
break;
case 322:
this.$ = {not: true}; 
break;
case 327:
this.$ = {when: $$[$0-3], then: $$[$0]}; 
break;
case 329:
this.$ = {else:$$[$0]}; 
break;
}
},
table: [o($V0,$V1,{17:1,18:2,21:3,24:5,25:6,26:7,27:8,28:9,29:10,30:11,31:12,32:13,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:27,47:28,48:29,73:34,159:37,176:40,190:46,222:47,192:54,22:$V2,53:$V3,61:$V4,62:$V5,67:$V6,75:$V7,76:$V8,77:$V9,125:$Va,128:$Vb,130:$Vc,134:$Vd,144:$Ve,163:$Vf,173:$Vg,174:$Vh,183:$Vi,186:$Vj,187:$Vk,189:$Vl,197:$Vm,226:$Vn}),{1:[3]},{19:[1,57],20:[1,58]},o($V0,[2,18]),{23:[1,59]},o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),o($V0,[2,35]),o($V0,[2,36]),o($V0,[2,37]),o($V0,[2,38]),o($V0,[2,39]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),o($V0,[2,43]),o($V0,[2,44]),o($V0,[2,45]),{54:[1,60]},{3:62,4:$Vo,5:$Vp,11:61},o($Vq,[2,54],{63:65,66:[1,66]}),{68:67,69:[2,57],70:[1,68],71:[1,69],72:[1,70]},o($V0,$Vr,{74:71,69:$Vs}),o($Vt,[2,80],{93:75,78:[1,73],85:[1,74],99:[1,77],151:[1,76]}),{156:[1,78]},{125:[1,79],128:$Vb,134:$Vd,144:$Ve,176:80,190:81,192:54,197:$Vm,222:82},{3:83,4:$Vo,5:$Vp,66:[1,84]},{54:[1,86],78:[1,85],135:[1,87],150:[1,88]},{177:[1,89]},{3:91,4:$Vo,5:$Vp,13:90},o($V0,[2,203],{3:92,4:$Vo,5:$Vp}),o($Vu,$Vv,{188:93,189:$Vw}),o($Vx,$Vr,{74:95,69:$Vs}),{3:96,4:$Vo,5:$Vp},o($Vy,$Vz,{158:97,191:98,168:$VA,170:$VB,193:$VC,195:$VD,196:$VE}),{3:62,4:$Vo,5:$Vp,11:105,157:104},o($V0,[2,271]),o($VF,[2,62]),o($VF,[2,63]),o($Vu,[2,163],{164:106,166:[1,107]}),{177:[2,185],180:[1,108]},{177:[2,186]},o($VG,[2,215]),o($Vu,[2,262],{180:[1,109]}),o($VH,[2,221],{198:110,194:[1,112],202:[1,111]}),{1:[2,16]},o($V0,$V1,{24:5,25:6,26:7,27:8,28:9,29:10,30:11,31:12,32:13,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:27,47:28,48:29,73:34,159:37,176:40,190:46,222:47,192:54,21:113,22:$V2,53:$V3,61:$V4,62:$V5,67:$V6,75:$V7,76:$V8,77:$V9,125:$Va,128:$Vb,130:$Vc,134:$Vd,144:$Ve,163:$Vf,173:$Vg,174:$Vh,183:$Vi,186:$Vj,187:$Vk,189:$Vl,197:$Vm,226:$Vn}),o($V0,[2,19]),{3:62,4:$Vo,5:$Vp,11:114},o($V0,[2,52]),o($VI,[2,7],{12:[1,115]}),o($VJ,[2,1]),o($VJ,[2,2]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:116,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vq,[2,55]),{69:[1,134]},{69:[2,58]},{69:[2,59]},{69:[2,60]},o($V0,[2,61]),o($Vx,[2,65]),o($Vu,$VX,{79:135,86:$VY}),{78:[1,137]},{54:[1,138],135:[1,139],150:[1,140]},{54:[1,141]},o($Vt,[2,81]),{3:62,4:$Vo,5:$Vp,11:105,157:142},{156:[1,143]},{177:[1,144]},o($Vy,$Vz,{191:98,158:145,168:$VA,170:$VB,193:$VC,195:$VD,196:$VE}),{3:62,4:$Vo,5:$Vp,11:105,157:146},o($V0,[2,175]),{3:147,4:$Vo,5:$Vp},o($Vu,$VZ,{175:148,86:$V_}),o($Vu,$VZ,{175:150,86:$V_}),o($Vu,$VZ,{175:151,86:$V_}),o($Vu,$VZ,{175:152,86:$V_}),{3:62,4:$Vo,5:$Vp,11:153},o($V0,[2,197],{184:[1,154]}),o($V$,[2,9],{12:[1,155]}),o($V0,[2,204],{12:[1,156]}),{3:157,4:$Vo,5:$Vp},o($Vu,[2,208]),o($V0,[2,210],{57:[1,158]}),o($V0,[2,211]),o($Vy,[2,213]),{192:159,197:$Vm},{162:[1,160]},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:161,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{194:[1,162],197:[2,216]},{197:[2,218]},{197:[2,219]},{223:[1,163]},o($V01,$V11,{160:164,87:$V21,161:$V31}),{3:169,4:$Vo,5:$Vp,165:167,167:168},o($Vu,[2,162]),{130:[1,171],131:[1,172],132:[1,173],133:[1,174],134:[1,170]},{130:[1,175],131:[1,176],132:[1,178],133:[1,179],134:[1,177]},{3:183,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:184,81:$VN,87:$VO,88:$VP,111:$VQ,199:180,203:181,204:$V41,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($VH,[2,222]),o($VH,[2,223]),o($V0,[2,17]),{55:185,56:[1,186],58:[1,187]},{3:188,4:$Vo,5:$Vp},{65:[1,189],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},o($Vt1,[2,272]),o($Vt1,[2,273]),o($Vt1,[2,274]),o($Vt1,$Vu1,{12:[1,214],81:$Vv1}),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:216,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:217,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,46:219,64:218,81:$VN,87:$VO,88:$VP,111:$VQ,159:220,163:$Vf,190:46,192:54,197:$Vm,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{81:[1,221]},{87:$VO,251:222,252:$VP},{88:[1,223]},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:224,81:$VN,87:$VO,88:$VP,92:$Vw1,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW,254:225,256:226},o($Vt1,[2,319]),o($Vt1,[2,320]),o([88,252],[2,322]),o($Vx1,[2,3]),o($Vx1,[2,4]),o($Vx1,[2,5]),o($V0,[2,56]),{3:229,4:$Vo,5:$Vp,14:228},{87:[1,230]},o($Vu,$VX,{79:231,86:$VY}),o($Vu,$VX,{79:232,86:$VY}),o($Vu,$VX,{79:233,86:$VY}),o($Vu,$VX,{79:234,86:$VY}),o($Vu,$VX,{79:235,86:$VY}),o($Vy1,$Vz1,{84:236,90:$VA1}),{3:62,4:$Vo,5:$Vp,11:105,157:238},{3:62,4:$Vo,5:$Vp,11:239},o($Vy,[2,212]),{223:[1,240]},o($V0,[2,176]),{3:229,4:$Vo,5:$Vp,14:241},{88:[1,242]},{3:62,4:$Vo,5:$Vp,11:243},{3:245,4:$Vo,5:$Vp,15:244},{3:247,4:$Vo,5:$Vp,16:246},o($VB1,$VC1,{178:248,81:$VD1}),{3:253,4:$Vo,5:$Vp,6:252,7:$VK,8:254,9:$VL,10:$VM,81:[1,251],185:250},{3:255,4:$Vo,5:$Vp},{3:256,4:$Vo,5:$Vp},o($V0,[2,206]),o($Vu,$Vv,{188:257,189:$Vw}),o($VG,[2,214]),{3:260,4:$Vo,5:$Vp,169:258,172:259},{87:$V51,114:$V61,171:[1,261],180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{197:[2,217]},{3:264,4:$Vo,5:$Vp,224:262,225:263},o($V01,[2,157]),{162:[1,265]},{161:[1,266]},o([125,128,134,144,197],[2,161],{89:[1,267]}),{65:[1,268]},{65:[2,166],81:[1,269]},{177:[2,187]},{177:[2,188]},{177:[2,189]},{177:[2,190]},{177:[2,191]},o($Vu,[2,263]),o($Vu,[2,264]),o($Vu,[2,265]),o($Vu,[2,266]),o($Vu,[2,267]),o($VE1,[2,232],{200:270,89:[1,271],156:[1,272]}),o($VF1,[2,225]),o($VF1,[2,226]),o([4,5,19,20,65,83,87,89,90,114,156,168,170,180,184,193,195,196,204,217,229,230,231,232,233,234,235,236,237,238,239,240,243,244,245,246,247,248,249],$Vu1,{12:[1,273],81:$Vv1}),o($VF1,$VG1,{205:274,3:275,4:$Vo,5:$Vp,65:$VH1,87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($V0,[2,49]),{57:[1,277]},{59:[1,278]},o($VI,[2,6]),{3:279,4:$Vo,5:$Vp},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:280,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:281,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:282,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:283,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:284,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:285,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:286,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:287,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:288,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:289,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:290,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:291,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:292,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:293,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:294,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:295,4:$Vo,5:$Vp},o($Vt1,[2,299]),{87:[1,297],111:[1,296]},o($Vt1,[2,301]),{111:[1,298],247:[1,299],248:[1,300],249:[1,301]},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:302,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:303,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:304,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:305,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:306,4:$Vo,5:$Vp},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:308,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,241:307,242:$VU,250:$VV,251:126,253:$VW},o($VI1,[2,278],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),o($VI1,[2,279],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),{83:[1,309],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{83:[1,310]},{190:81,192:54,197:$Vm},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:311,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{252:[1,312]},{81:[1,313]},{87:$V51,92:$Vw1,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1,254:314,256:226},{76:$VJ1,92:$Vw1,255:315,256:316,258:$VK1},o($VL1,[2,326]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:318,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{80:[1,319]},o($VM1,[2,11],{12:[1,320]}),{88:[1,321]},{3:229,4:$Vo,5:$Vp,14:322},{3:62,4:$Vo,5:$Vp,11:323},{3:245,4:$Vo,5:$Vp,15:324},{3:247,4:$Vo,5:$Vp,16:325},{3:62,4:$Vo,5:$Vp,11:326},o($V0,$Vz,{158:327,168:$VA,170:$VB}),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:328,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vy1,$Vz1,{84:329,90:$VA1}),o($VB1,$VC1,{178:330,81:$VD1}),{3:264,4:$Vo,5:$Vp,224:331,225:263},o($V0,[2,177]),o($Vu,[2,178]),o($V0,[2,180]),o($V0,[2,181]),o($VN1,[2,13],{12:[1,332]}),o($V0,[2,182]),o($VO1,[2,15],{12:[1,333]}),{46:336,113:$VP1,159:220,163:$Vf,179:334,181:$VQ1,190:46,192:54,197:$Vm},{3:339,4:$Vo,5:$Vp,82:338},o($V0,[2,198]),{3:253,4:$Vo,5:$Vp,6:252,7:$VK,8:254,9:$VL,10:$VM,185:340},o($Vy,[2,200]),o($Vy,[2,201]),o($Vy,[2,202]),o($V$,[2,8]),o($V0,[2,205]),{3:341,4:$Vo,5:$Vp},o($Vy,[2,169],{89:[1,343],170:[1,342]}),o($VR1,[2,173]),o($VR1,$VS1,{108:344,116:$VT1,117:$VU1}),o($Vy,[2,170]),o($Vy1,$Vz1,{84:347,89:$VV1,90:$VA1}),o($VW1,[2,269]),{184:[1,349]},{3:350,4:$Vo,5:$Vp},o($VX1,[2,160]),{3:169,4:$Vo,5:$Vp,167:351},{81:[1,352]},{3:339,4:$Vo,5:$Vp,82:353},o($VY1,$Vz1,{84:354,90:$VA1}),{3:183,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:184,81:$VN,87:$VO,88:$VP,111:$VQ,203:355,204:$V41,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:62,4:$Vo,5:$Vp,11:358,81:$VZ1,206:356,207:357},{3:306,4:$Vo,5:$Vp,204:[1,360]},o($VF1,[2,228]),o($V_1,[2,230]),{3:361,4:$Vo,5:$Vp},{3:362,4:$Vo,5:$Vp},{3:364,4:$Vo,5:$Vp,60:363},o($V0,[2,53]),o($VI1,[2,280],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),o($VI1,[2,281],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),o($V$1,[2,282],{114:$V61}),o($V$1,[2,283],{114:$V61}),o($V$1,[2,284],{114:$V61}),o($VI1,[2,285],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),o($VI1,[2,286],{114:$V61,204:$V91,231:$Vc1,232:$Vd1}),o($V02,[2,287],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,246:$Vp1}),o($V02,[2,288],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,246:$Vp1}),o($V12,[2,289],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1}),o($V12,[2,290],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1}),o($V12,[2,291],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1}),o($V12,[2,292],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1}),o($V22,[2,293],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1}),o([4,5,19,20,65,67,76,83,89,90,92,156,168,170,171,180,193,195,196,211,212,213,215,216,217,219,257,258],[2,294],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($Vt1,[2,298]),o($Vt1,[2,300]),{111:[1,365]},o($Vt1,[2,302]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:366,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:367,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:368,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o([4,5,19,20,65,67,76,83,87,89,90,92,156,168,170,171,180,184,193,195,196,211,212,213,215,216,217,219,235,240,243,244,245,246,247,248,249,257,258],[2,304],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1}),o($V02,[2,305],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,246:$Vp1}),o($V02,[2,307],{114:$V61,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,246:$Vp1}),o([4,5,19,20,65,67,76,83,89,90,92,156,168,170,171,180,193,195,196,211,212,213,215,216,217,219,249,257,258],[2,309],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1}),o($Vt1,[2,276],{12:[1,369]}),{83:[1,370],89:[1,371]},o($V32,[2,324],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($Vt1,[2,296]),o($Vt1,[2,316]),{65:[1,372],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{3:62,4:$Vo,5:$Vp,11:373,81:[1,374]},{46:375,159:220,163:$Vf,190:46,192:54,197:$Vm},{76:$VJ1,92:$Vw1,255:376,256:316,258:$VK1},{76:[1,377]},o($VL1,[2,325]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:378,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1,257:[1,379]},{3:380,4:$Vo,5:$Vp},{3:381,4:$Vo,5:$Vp},o($Vu,[2,69]),{80:[1,382]},{65:[1,383],81:[1,384]},o($V42,[2,132],{136:385,140:[1,386],141:[1,387],142:[1,388]}),{65:[1,389]},{152:[1,390]},o($V0,[2,155]),o($VY1,[2,72],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($V0,$Vz,{158:391,168:$VA,170:$VB}),{46:336,113:$VP1,159:220,163:$Vf,179:392,181:$VQ1,190:46,192:54,197:$Vm},o($Vy1,$Vz1,{84:393,89:$VV1,90:$VA1}),{3:394,4:$Vo,5:$Vp},{3:395,4:$Vo,5:$Vp},o($V0,[2,184]),{81:$V52,182:396,220:397},o($V0,[2,193]),{181:[1,399]},{83:[1,400],89:$V62},o($V72,[2,71]),{83:[1,402]},o($V0,[2,209]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:403,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:260,4:$Vo,5:$Vp,172:404},o($VR1,[2,174]),o($V82,[2,106]),o($V82,[2,107]),o($V0,$Vz,{158:405,168:$VA,170:$VB}),{3:264,4:$Vo,5:$Vp,225:406},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:407,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($VX1,[2,159]),{65:[1,408]},{46:409,159:220,163:$Vf,190:46,192:54,197:$Vm},{83:[1,410],89:$V62},o($VG,[2,250],{201:411,217:[1,412]}),o($VF1,[2,224]),o($VE1,[2,233],{208:413,210:415,89:$V92,211:$Va2,212:$Vb2,213:$Vc2,215:$Vd2,216:$Ve2}),o($Vf2,[2,237]),o([19,20,80,83,87,89,90,152,161,168,170,193,195,196,211,212,213,215,216,217],$VG1,{3:275,205:420,4:$Vo,5:$Vp,65:$VH1}),{3:62,4:$Vo,5:$Vp,11:358,46:422,81:$VZ1,159:220,163:$Vf,190:46,192:54,197:$Vm,206:421,207:357},o($VF1,[2,227]),o($V_1,[2,231]),o($V0,[2,50]),o($V0,[2,51]),{3:425,4:$Vo,5:$Vp,100:423,102:424},o($Vt1,[2,303]),o($V22,[2,306],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1}),o($V22,[2,308],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1}),o($V22,[2,310],{87:$V51,114:$V61,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1}),{3:426,4:$Vo,5:$Vp},o($Vt1,[2,295]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:427,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{3:425,4:$Vo,5:$Vp,100:428,102:424},o($Vt1,[2,311]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,46:430,64:432,81:$VN,83:[1,429],87:$VO,88:$VP,111:$VQ,159:220,163:$Vf,190:46,192:54,197:$Vm,218:431,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{83:[1,433]},{76:[1,434]},o($Vt1,[2,318]),{76:[2,329],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:435,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{81:[1,436]},o($VM1,[2,10]),{3:437,4:$Vo,5:$Vp},{46:438,159:220,163:$Vf,190:46,192:54,197:$Vm},{3:364,4:$Vo,5:$Vp,60:440,94:439},{125:[1,442],128:[1,444],137:441,144:[1,443]},o($V42,[2,133]),o($V42,[2,134]),{143:[1,445]},{46:446,159:220,163:$Vf,190:46,192:54,197:$Vm},{3:447,4:$Vo,5:$Vp},o($V0,[2,156]),o($V0,[2,183]),o($V0,$Vz,{158:448,168:$VA,170:$VB}),o($VN1,[2,12]),o($VO1,[2,14]),o($V0,[2,192],{89:[1,449]}),o($Vg2,[2,256]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:451,81:$VN,87:$VO,88:$VP,111:$VQ,221:450,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($V0,[2,194]),o($VB1,[2,196]),{3:452,4:$Vo,5:$Vp},o($V0,[2,199]),{87:$V51,114:$V61,171:[1,453],180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},o($VR1,[2,172]),o($V0,[2,261]),o($VW1,[2,268]),o($VW1,[2,270],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),{81:[1,454]},{83:[1,455]},{65:[2,167]},o($VG,[2,220]),{162:[1,456]},{3:62,4:$Vo,5:$Vp,11:358,81:$VZ1,207:457},o($Vh2,[2,239]),{211:[1,458]},{210:459,211:$Va2,213:$Vc2,215:$Vd2,216:$Ve2},{211:[2,244],214:[1,460]},{211:[2,245]},{211:[2,246]},o($Vi2,$V11,{160:461,87:$V21,161:$V31}),{83:[1,462],89:$V92,208:413,210:415,211:$Va2,212:$Vb2,213:$Vc2,215:$Vd2,216:$Ve2},{83:[1,463]},o($Vj2,[2,85],{101:464,103:465,105:467,115:474,85:$Vk2,87:$Vl2,104:$Vm2,106:$Vn2,112:$Vo2,113:$Vp2,114:$Vq2,123:$Vr2}),o($Vs2,[2,86],{3:477,4:$Vo,5:$Vp,81:[1,476]}),o($Vt2,[2,90]),o($Vt1,[2,277]),o($V32,[2,323],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),{83:[1,478]},o($Vt1,[2,312]),{83:[1,479]},{83:[1,480],89:$Vu2},o($Vv2,[2,254],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($Vt1,[2,315]),o($Vt1,[2,317]),o($VL1,[2,327],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),{3:339,4:$Vo,5:$Vp,82:482},{81:[1,483]},o($V0,[2,76]),{83:[2,110],89:[1,485],95:484},o($V32,[2,83]),{80:[1,486]},{80:[2,136]},{80:[2,137]},{80:[2,138],143:[1,487]},o($V42,[2,135]),o($V0,[2,149]),o($V0,[2,151],{153:488,81:[1,489]}),o($V0,[2,260]),{81:$V52,220:490},{83:[1,491],89:[1,492]},o($V32,[2,259],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($V72,[2,70]),o($Vy,[2,171]),{46:493,159:220,163:$Vf,190:46,192:54,197:$Vm},o($Vw2,[2,164]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:432,81:$VN,87:$VO,88:$VP,111:$VQ,218:494,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vf2,[2,247],{209:495,80:[1,496],152:[1,497]}),o($Vh2,[2,240]),{211:[1,498]},{211:[2,243]},o($Vi2,[2,234]),o($Vi2,[2,235]),o($Vi2,$VG1,{3:275,205:499,4:$Vo,5:$Vp,65:$VH1}),o($Vj2,[2,84],{105:467,115:474,103:500,85:$Vk2,87:$Vl2,104:$Vm2,106:$Vn2,112:$Vo2,113:$Vp2,114:$Vq2,123:$Vr2}),o($Vs2,[2,92]),{3:501,4:$Vo,5:$Vp},o($Vs2,[2,94]),{107:[1,502]},{111:[1,503]},o($Vs2,$Vx2,{109:504,80:$Vy2}),{81:[1,506]},{3:509,4:$Vo,5:$Vp,6:507,7:$VK,8:508,9:$VL,10:$VM,81:[1,510]},{3:511,4:$Vo,5:$Vp},o($Vs2,[2,104]),{3:512,4:$Vo,5:$Vp},{6:513,7:$VK},o($Vt2,[2,89]),o($Vt1,[2,297]),o($Vt1,[2,313]),o($Vt1,[2,314]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:514,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{83:[1,515],89:$V62},{3:339,4:$Vo,5:$Vp,82:516},{83:[1,517]},{3:364,4:$Vo,5:$Vp,60:518,85:$Vz2,104:$VA2,106:$VB2,112:$VC2,119:519,120:520,121:522,122:$VD2},{3:527,4:$Vo,5:$Vp},{3:339,4:$Vo,5:$Vp,82:528},o($V0,[2,150]),{154:529,155:[1,530]},o($Vg2,[2,255]),o($Vg2,[2,257]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:531,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{83:[1,532]},o($VG,[2,251],{89:$Vu2,219:[1,533]}),o($Vf2,[2,238]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:534,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{81:[1,535]},o($Vh2,[2,241]),o($Vi2,[2,236]),o($Vs2,[2,91]),{85:$Vk2,87:$Vl2,105:536,106:$Vn2,112:$Vo2,113:$Vp2,114:$Vq2,115:474,123:$Vr2},o([19,20,80,83,85,87,89,104,106,112,113,114,118,123],$VS1,{108:537,116:$VT1,117:$VU1}),o($Vs2,$Vx2,{109:538,80:$Vy2}),o($Vs2,[2,97]),{129:[1,539]},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:540,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vs2,[2,99]),o($Vs2,[2,100]),o($Vs2,[2,101]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:541,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vs2,[2,103]),{81:[1,542]},{83:[1,543],89:[1,544]},o($Vv2,[2,253],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($V0,$Vz1,{84:545,90:$VA1}),{83:[1,546],89:$V62},o($V0,[2,78],{96:547,97:[1,548]}),o($V32,[2,82]),{83:[2,111],89:[1,549]},o($V32,[2,113]),{3:550,4:$Vo,5:$Vp},o($V32,[2,115]),{107:[1,551]},{81:[1,552]},{81:[1,553]},{107:[1,554]},o($VE2,[2,140],{138:555,145:[1,556]}),{80:[2,139],89:$V62},{83:[1,557],89:[1,558]},o($V32,[2,154]),o($V32,[2,258],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),o($Vw2,[2,165]),{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:559,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},o($Vf2,[2,248],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),{3:339,4:$Vo,5:$Vp,82:560},o($Vs2,[2,93]),o($VF2,$Vx2,{109:561,80:$Vy2}),o($Vs2,[2,96]),{130:[1,562],131:[1,563],132:[1,564],133:[1,565],134:[1,566]},{83:[1,567],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{83:[1,568],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{3:339,4:$Vo,5:$Vp,82:569},o($Vs2,[2,87]),{6:570,7:$VK},o($V0,[2,66]),o($V0,$Vz1,{84:571,90:$VA1}),o($V0,[2,77]),{98:[1,572]},{85:$Vz2,104:$VA2,106:$VB2,112:$VC2,120:573,121:522,122:$VD2},{85:$Vz2,106:$VB2,112:$VC2,121:574,122:$VD2},{81:[1,575]},{3:339,4:$Vo,5:$Vp,82:576},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:577,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{81:[1,578]},{67:[2,75],91:579,92:[1,580]},{146:[1,581]},o($V0,[2,152]),{155:[1,582]},o($VG,[2,252],{87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1}),{83:[1,583],89:$V62},o($Vs2,[2,108],{110:584,118:[1,585]}),o($VF2,[2,126]),o($VF2,[2,127]),o($VF2,[2,128]),o($VF2,[2,129]),o($VF2,[2,130]),o($Vs2,[2,98]),o($Vs2,[2,102]),{83:[1,586],89:$V62},{83:[1,587]},o($V0,[2,67]),o($V0,[2,79]),o($V32,[2,112]),o($V32,[2,114]),{3:339,4:$Vo,5:$Vp,82:588},{83:[1,589],89:$V62},{83:[1,590],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},{3:339,4:$Vo,5:$Vp,82:591},{67:[1,593],139:592},{3:120,4:$Vo,5:$Vp,6:128,7:$VK,8:129,9:$VL,10:$VM,64:594,81:$VN,87:$VO,88:$VP,111:$VQ,227:117,228:$VR,229:$VS,230:$VT,242:$VU,250:$VV,251:126,253:$VW},{147:[1,595]},o($V32,[2,153]),o($Vf2,[2,249]),o($Vs2,[2,95]),o($Vs2,[2,109]),o($Vs2,[2,121],{124:596,80:[1,597]}),o($Vs2,[2,88]),{83:[1,598],89:$V62},o($V32,$Vx2,{109:599,80:$Vy2}),o($V32,[2,118]),{83:[1,600],89:$V62},o($V0,[2,131]),{34:605,40:604,46:606,47:603,125:$Va,128:$Vb,134:$Vd,144:$Ve,148:601,149:602,159:37,163:$Vf,176:40,190:46,192:54,197:$Vm,222:47},{67:[2,74],87:$V51,114:$V61,180:$V71,184:$V81,204:$V91,229:$Va1,230:$Vb1,231:$Vc1,232:$Vd1,233:$Ve1,234:$Vf1,235:$Vg1,236:$Vh1,237:$Vi1,238:$Vj1,239:$Vk1,240:$Vl1,243:$Vm1,244:$Vn1,245:$Vo1,246:$Vp1,247:$Vq1,248:$Vr1,249:$Vs1},o($VE2,[2,141]),o($Vs2,[2,120]),{125:[1,607],128:[1,608]},o($V32,$Vx2,{109:609,80:$Vy2}),o($V32,[2,117]),{115:610,123:$Vr2},{34:605,40:604,46:606,47:603,76:[1,611],125:$Va,128:$Vb,134:$Vd,144:$Ve,149:612,159:37,163:$Vf,176:40,190:46,192:54,197:$Vm,222:47},{20:[1,613]},{20:[2,145]},{20:[2,146]},{20:[2,147]},{20:[2,148]},{126:[1,614]},{126:[1,615]},o($V32,[2,116]),o($V32,[2,119]),o($V0,[2,142]),{20:[1,616]},o($VG2,[2,144]),{127:[1,617]},{127:[1,618]},o($VG2,[2,143]),o($Vs2,[2,122],{80:[1,619]}),o($Vs2,[2,123]),{128:[1,620]},{126:[1,621]},{127:[1,622]},o($Vs2,[2,124])],
defaultActions: {53:[2,186],57:[2,16],68:[2,58],69:[2,59],70:[2,60],102:[2,218],103:[2,219],162:[2,217],170:[2,187],171:[2,188],172:[2,189],173:[2,190],174:[2,191],410:[2,167],418:[2,245],419:[2,246],442:[2,136],443:[2,137],460:[2,243],603:[2,145],604:[2,146],605:[2,147],606:[2,148]},
parseError: function parseError(str, hash) {
  if (hash.recoverable) {
    this.trace(str);
  } else {
    var error = new Error(str);
    error.hash = hash;
    throw error;
  }
},
parse: function parse(input) {
  var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
  var args = lstack.slice.call(arguments, 1);
  var lexer = Object.create(this.lexer);
  var sharedState = { yy: {} };
  for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
      }
  }
  lexer.setInput(input, sharedState.yy);
  sharedState.yy.lexer = lexer;
  sharedState.yy.parser = this;
  if (typeof lexer.yylloc == 'undefined') {
      lexer.yylloc = {};
  }
  var yyloc = lexer.yylloc;
  lstack.push(yyloc);
  var ranges = lexer.options && lexer.options.ranges;
  if (typeof sharedState.yy.parseError === 'function') {
      this.parseError = sharedState.yy.parseError;
  } else {
      this.parseError = Object.getPrototypeOf(this).parseError;
  }
  function popStack(n) {
      stack.length = stack.length - 2 * n;
      vstack.length = vstack.length - n;
      lstack.length = lstack.length - n;
  }
  _token_stack:
      var lex = function() {
          var token;
          token = lexer.lex() || EOF;
          if (typeof token !== 'number') {
              token = self.symbols_[token] || token;
          }
          return token;
      }
  var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
  while (true) {
      state = stack[stack.length - 1];
      if (this.defaultActions[state]) {
          action = this.defaultActions[state];
      } else {
          if (symbol === null || typeof symbol == 'undefined') {
              symbol = lex();
          }
          action = table[state] && table[state][symbol];
      }
                  if (typeof action === 'undefined' || !action.length || !action[0]) {
              var errStr = '';
              expected = [];
              for (p in table[state]) {
                  if (this.terminals_[p] && p > TERROR) {
                      expected.push('\'' + this.terminals_[p] + '\'');
                  }
              }
              if (lexer.showPosition) {
                  errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
              } else {
                  errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
              }
              this.parseError(errStr, {
                  text: lexer.match,
                  token: this.terminals_[symbol] || symbol,
                  line: lexer.yylineno,
                  loc: yyloc,
                  expected: expected
              });
          }
      if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
      }
      switch (action[0]) {
      case 1:
          stack.push(symbol);
          vstack.push(lexer.yytext);
          lstack.push(lexer.yylloc);
          stack.push(action[1]);
          symbol = null;
          if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                  recovering--;
              }
          } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
          }
          break;
      case 2:
          len = this.productions_[action[1]][1];
          yyval.$ = vstack[vstack.length - len];
          yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
          };
          if (ranges) {
              yyval._$.range = [
                  lstack[lstack.length - (len || 1)].range[0],
                  lstack[lstack.length - 1].range[1]
              ];
          }
          r = this.performAction.apply(yyval, [
              yytext,
              yyleng,
              yylineno,
              sharedState.yy,
              action[1],
              vstack,
              lstack
          ].concat(args));
          if (typeof r !== 'undefined') {
              return r;
          }
          if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
          }
          stack.push(this.productions_[action[1]][0]);
          vstack.push(yyval.$);
          lstack.push(yyval._$);
          newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
          stack.push(newState);
          break;
      case 3:
          return true;
      }
  }
  return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
      if (this.yy.parser) {
    console.log('here2', error, error.hash)
          this.yy.parser.parseError(str, hash);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
  },

// resets the lexer, sets new input
setInput:function (input, yy) {
      this.yy = yy || this.yy || {};
      this._input = input;
      this._more = this._backtrack = this.done = false;
      this.yylineno = this.yyleng = 0;
      this.yytext = this.matched = this.match = '';
      this.conditionStack = ['INITIAL'];
      this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
      };
      if (this.options.ranges) {
          this.yylloc.range = [0,0];
      }
      this.offset = 0;
      return this;
  },

// consumes and returns one char from the input
input:function () {
      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;
      var lines = ch.match(/(?:\r\n?|\n).*/g);
      if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
      } else {
          this.yylloc.last_column++;
      }
      if (this.options.ranges) {
          this.yylloc.range[1]++;
      }

      this._input = this._input.slice(1);
      return ch;
  },

// unshifts one char (or a string) into the input
unput:function (ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);

      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      //this.yyleng -= len;
      this.offset -= len;
      var oldLines = this.match.split(/(?:\r\n?|\n)/g);
      this.match = this.match.substr(0, this.match.length - 1);
      this.matched = this.matched.substr(0, this.matched.length - 1);

      if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
      }
      var r = this.yylloc.range;

      this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0)
               + oldLines[oldLines.length - lines.length].length - lines[0].length :
            this.yylloc.first_column - len
      };

      if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
      }
      this.yyleng = this.yytext.length;
      return this;
  },

// When called from action, caches matched text and appends it on next action
more:function () {
      this._more = true;
      return this;
  },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
      if (this.options.backtrack_lexer) {
          this._backtrack = true;
      } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
          });

      }
      return this;
  },

// retain first n characters of the match
less:function (n) {
      this.unput(this.match.slice(n));
  },

// displays already matched input, i.e. for error messages
pastInput:function () {
      var past = this.matched.substr(0, this.matched.length - this.match.length);
      return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
  },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
      var next = this.match;
      if (next.length < 20) {
          next += this._input.substr(0, 20-next.length);
      }
      return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
  },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
      var pre = this.pastInput();
      var c = new Array(pre.length + 1).join("-");
      return pre + this.upcomingInput() + "\n" + c + "^";
  },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
      var token,
          lines,
          backup;

      if (this.options.backtrack_lexer) {
          // save context
          backup = {
              yylineno: this.yylineno,
              yylloc: {
                  first_line: this.yylloc.first_line,
                  last_line: this.last_line,
                  first_column: this.yylloc.first_column,
                  last_column: this.yylloc.last_column
              },
              yytext: this.yytext,
              match: this.match,
              matches: this.matches,
              matched: this.matched,
              yyleng: this.yyleng,
              offset: this.offset,
              _more: this._more,
              _input: this._input,
              yy: this.yy,
              conditionStack: this.conditionStack.slice(0),
              done: this.done
          };
          if (this.options.ranges) {
              backup.yylloc.range = this.yylloc.range.slice(0);
          }
      }

      lines = match[0].match(/(?:\r\n?|\n).*/g);
      if (lines) {
          this.yylineno += lines.length;
      }
      this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ?
                       lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                       this.yylloc.last_column + match[0].length
      };
      this.yytext += match[0];
      this.match += match[0];
      this.matches = match;
      this.yyleng = this.yytext.length;
      if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
      }
      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match[0].length);
      this.matched += match[0];
      token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
      if (this.done && this._input) {
          this.done = false;
      }
      if (token) {
          return token;
      } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
              this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
      }
      return false;
  },

// return next match in input
next:function () {
      if (this.done) {
          return this.EOF;
      }
      if (!this._input) {
          this.done = true;
      }

      var token,
          match,
          tempMatch,
          index;
      if (!this._more) {
          this.yytext = '';
          this.match = '';
      }
      var rules = this._currentRules();
      for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
              match = tempMatch;
              index = i;
              if (this.options.backtrack_lexer) {
                  token = this.test_match(tempMatch, rules[i]);
                  if (token !== false) {
                      return token;
                  } else if (this._backtrack) {
                      match = false;
                      continue; // rule action called reject() implying a rule MISmatch.
                  } else {
                      // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                      return false;
                  }
              } else if (!this.options.flex) {
                  break;
              }
          }
      }
      if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
              return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
      }
      if (this._input === "") {
          return this.EOF;
      } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
          });
      }
  },

// return next match that has a token
lex:function lex() {
      var r = this.next();
      if (r) {
          return r;
      } else {
          return this.lex();
      }
  },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
      this.conditionStack.push(condition);
  },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
      var n = this.conditionStack.length - 1;
      if (n > 0) {
          return this.conditionStack.pop();
      } else {
          return this.conditionStack[0];
      }
  },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
      } else {
          return this.conditions["INITIAL"].rules;
      }
  },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);
      if (n >= 0) {
          return this.conditionStack[n];
      } else {
          return "INITIAL";
      }
  },

// alias for begin(condition)
pushState:function pushState(condition) {
      this.begin(condition);
  },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
      return this.conditionStack.length;
  },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1:return 5
break;
case 2:return 5
break;
case 3:return 10
break;
case 4:return 9
break;
case 5:/* skip -- comments */
break;
case 6:/* skip whitespace */
break;
case 7:return 131
break;
case 8:return 127
break;
case 9:return 58
break;
case 10:return 141
break;
case 11:return 194
break;
case 12:return 53
break;
case 13:return 61
break;
case 14:return 240
break;
case 15:return 65
break;
case 16:return 116
break;
case 17:return 62
break;
case 18:return 118
break;
case 19:return 140
break;
case 20:return 67
break;
case 21:return 249
break;
case 22:return 162
break;
case 23:return 'CASCADE'
break;
case 24:return 253
break;
case 25:return 242
break;
case 26:return 112
break;
case 27:return 114
break;
case 28:return 59
break;
case 29:return 75
break;
case 30:return 129
break;
case 31:return 104
break;
case 32:return 77
break;
case 33:return 216
break;
case 34:return 'CURRENT DATE'
break;
case 35:return 'CURRENT TIME'
break;
case 36:return 'CURRENT TIMESTAMP'
break;
case 37:return 66
break;
case 38:return 113
break;
case 39:return 'DEFERRABLE'
break;
case 40:return 70
break;
case 41:return 125
break;
case 42:return 117
break;
case 43:return 173
break;
case 44:return 202
break;
case 45:return 174
break;
case 46:return 146
break;
case 47:return 258
break;
case 48:return 76
break;
case 49:return 246
break;
case 50:return 196
break;
case 51:return 72
break;
case 52:return 88
break;
case 53:return 50
break;
case 54:return 132
break;
case 55:return 145
break;
case 56:return 122
break;
case 57:return 156
break;
case 58:return 'FULL'
break;
case 59:return 'GLOB'
break;
case 60:return 217
break;
case 61:return 219
break;
case 62:return 86
break;
case 63:return 133
break;
case 64:return 71
break;
case 65:return 252
break;
case 66:return 78
break;
case 67:return 161
break;
case 68:return 'INITIALLY'
break;
case 69:return 215
break;
case 70:return 144
break;
case 71:return 142
break;
case 72:return 195
break;
case 73:return 177
break;
case 74:return 244
break;
case 75:return 243
break;
case 76:return 211
break;
case 77:return 107
break;
case 78:return 213
break;
case 79:return 247
break;
case 80:return 'LMIT'
break;
case 81:return 248
break;
case 82:return 212
break;
case 83:return 126
break;
case 84:return 87
break;
case 85:return 245
break;
case 86:return 111
break;
case 87:return 143
break;
case 88:return 'OFFSET'
break;
case 89:return 80
break;
case 90:return 180
break;
case 91:return 168
break;
case 92:return 214
break;
case 93:return 52
break;
case 94:return 183
break;
case 95:return 106
break;
case 96:return 51
break;
case 97:return 'RAISE'
break;
case 98:return 166
break;
case 99:return 123
break;
case 100:return 'REGEXP'
break;
case 101:return 186
break;
case 102:return 187
break;
case 103:return 56
break;
case 104:return 134
break;
case 105:return 'RESTRICT'
break;
case 106:return 'RIGHT'
break;
case 107:return 130
break;
case 108:return 147
break;
case 109:return 189
break;
case 110:return 197
break;
case 111:return 223
break;
case 112:return 54
break;
case 113:return 'TEMP'
break;
case 114:return 99
break;
case 115:return 257
break;
case 116:return 57
break;
case 117:return 69
break;
case 118:return 135
break;
case 119:return 193
break;
case 120:return 85
break;
case 121:return 128
break;
case 122:return 152
break;
case 123:return 226
break;
case 124:return 181
break;
case 125:return 150
break;
case 126:return 151
break;
case 127:return 92
break;
case 128:return 90
break;
case 129:return 163
break;
case 130:return 97
break;
case 131:return 7
break;
case 132:return 7
break;
case 133:return 'TILDEs'
break;
case 134:return 229
break;
case 135:return 230
break;
case 136:return 204
break;
case 137:return 231
break;
case 138:return 232
break;
case 139:return 234
break;
case 140:return 233
break;
case 141:return 235
break;
case 142:return 235
break;
case 143:return 237
break;
case 144:return 236
break;
case 145:return 239
break;
case 146:return 238
break;
case 147:return 184
break;
case 148:return 'BITAND'
break;
case 149:return 'BITOR'
break;
case 150:return 81
break;
case 151:return 83
break;
case 152:return 12
break;
case 153:return 89
break;
case 154:return 'COLON'
break;
case 155:return 20
break;
case 156:return 'DOLLAR'
break;
case 157:return 'QUESTION'
break;
case 158:return 'CARET'
break;
case 159:return 4
break;
case 160:return 19
break;
case 161:return 'INVALID'
break;
}
},
rules: [/^(?:\[([^\]])*?\])/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:([`](\\.|[^"]|\\")*?[`])+)/i,/^(?:X(['](\\.|[^']|\\')*?['])+)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABORT\b)/i,/^(?:ACTION\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:AUTOINCREMENT\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COMMIT\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CURRENT_DATE\b)/i,/^(?:CURRENT_TIME\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EACH\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FAIL\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GLOB\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INITIALLY\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:ISNULL\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:NATURAL\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NOTNULL\b)/i,/^(?:NULL\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:ON\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRAGMA\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RAISE\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELEASE\b)/i,/^(?:RENAME\b)/i,/^(?:REPLACE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROW\b)/i,/^(?:SAVEPOINT\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:TABLE\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRIGGER\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:VIRTUAL\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:WITHOUT\b)/i,/^(?:[-]?(\d*[.])?\d+[eE]\d+)/i,/^(?:[-]?(\d*[.])?\d+)/i,/^(?:~)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
  if (!args[1]) {
      console.log('Usage: '+args[0]+' FILE');
      process.exit(1);
  }
  var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
  return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
exports.main(process.argv.slice(1));
}
}

/**
Extend an object with another object properties
*/
function extend (a,b){
  if(typeof a == 'undefined') a = {};
  for(key in b) {
      if(b.hasOwnProperty(key)) {
          a[key] = b[key]
      }
  }
  return a;
};

/**
Remove star-slash multiline comments from the string
*/
function uncomment(str) {
str = ('__' + str + '__').split('');
var quote = false,
  quoteSign,
  blockComment = false,
  lineComment = false;

for (var i = 0, l = str.length; i < l; i++) {
  var unescaped = str[i - 1] !== '\\' || str[i - 2] === '\\';

  if (quote) {
    if (str[i] === quoteSign && unescaped)
      quote = false;
  } else if (blockComment) {
    if (str[i] === '*' && str[i + 1] === '/') {
        str[i] = str[i + 1] = '';
      blockComment = false;
      i++;
    } else { 
      str[i] = '';
    }
  } else if (lineComment) {
    if (str[i + 1] == '\n' || str[i + 1] == '\r')
      lineComment = false;
    str[i] = '';
  } else {
    if (str[i] == '"' || str[i] == "'") {
      quote = true;
      quoteSign = str[i];
    } else if (str[i] == '[' && str[i-1] != "@") {
      quote = true;
      quoteSign = ']';
    } else if (str[i] === '/' && str[i + 1] === '*') {
          str[i] = '';
        blockComment = true;
    }
  }
}
str = str.join('').slice(2, -2);
return str;
};


/** 
To use extend() function in the parser 
*/
parser.yy.extend = extend;

/** 
Main parse function
@return string ast Abstract Syntax Tree
*/
function parse(sql){
return parser.parse(uncomment(sql));
}


// For debugging purposes
WebSQLShim.parse = parse;



/**

Main part of the WebSQLShim

See http://www.w3.org/TR/webdatabase/#preprocess-the-sql-statement
*/

// 1. Check, if WebSQL exists

// Main class

WebSQLShim.openDatabase = function(name, version, displayName, estimatedSize, creationCallback) {
// Error messages
if(arguments.length != 4) {
  throw new TypeError("Failed to execute 'openDatabase' on 'Window': 4 arguments required, but only 1 present.");
}
if(arguments.length >= 5 && typeof creationCallback != 'function') {
  throw new TypeError("Failed to execute 'openDatabase' on 'Window': The callback provided as parameter 5 is not a function.");
}

var database = new Database();
if(creationCallback) {
  creationCallback(database);
  return;
} else {
  return database;
}
};

/*
var openDatabaseSync = function(name, version, displayName, estimatedSize, creationCallback) {

var db = new Database();
if(creationCallback) {
  creationCallback(db);
} else {
  return db;
}
};
*/

// Database class

var Database = function(){
this.readonly = false; // read only option
};

Database.prototype.transaction = function(callback){
var tx = new SQLTransaction(false);
callback(tx);
};

Database.prototype.readTransaction = function(callback){
var tx = new SQLTransaction(true);
callback(tx);
};

Database.prototype.changeVersion = function(oldversion, newversion, callback){
var tx = new SQLTransaction(true);
callback(tx);
};



// Transaction class


var SQLTransaction = function(readonly){
this.readonly = readonly;
};

/*
var SQLTransactionSync = function(readonly){
this.readonly = readonly;	
};
*/

SQLTransaction.prototype.executeSql = function(sql, params, callback){

// 1. Parse
var ast = parse(sql);
if(ast.length != 1) {
  throw new Error('WebSQL supports only one statement');
}

bindParameters(ast,params);
interpreter[ast[0].statement](ast, callback);

//	if(callback) callback(this);
// 2. Bind parameters
// bindParameters(ast);
//
// run(ast, params) 
//
// var data = new SQLResultSet(); 
// callback(data);
};




var SQLResultSet = function(){
this.insertId = 0;
this.rowsAffected = 0;
// this.rows = new SQLResultSetRowList();

};

var SQLResultSetRowList = function(){
this.data = [{a:1},{a:2}];
this.length = this.data.length;
};

SQLResultSetRowList.prototype.item = function(idx){
return this.data[idx];
};




var interpreter = {};



function bindParameters (ast, params) {
// Bind parameters in recursion to AST
}

interpreter['ALTER TABLE'] = function(ast, callback){

};











interpreter['CREATE TABLE'] = function(ast, callback){
// console.log('CREATE TABLE');
};
























interpreter['INSERT'] = function(){
console.log('INSERT');
}













interpreter['SELECT'] = function(ast, callback){
var res = new SQLResultSet();
res.insertId = undefined;
res.rowsAffected = 1;
res.rows = new SQLResultSetRowsList();
res.rows.data = [{a:1},{a:2}];
};




window.sqlLint = WebSQLShim;

return WebSQLShim;

}));


//# sourceMappingURL=websqlshim.js.map